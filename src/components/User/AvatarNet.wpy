<style lang="scss" type="text/scss">
    @import "../../common/styles/variables.scss";
    @import "../../common/styles/mixins.scss";
    @import "../../common/styles/common.scss";

    .net{
		&-container{
			position: relative;
			width: 750rpx; 
        	height: 840rpx; 
			overflow: hidden;
		}
		&-userhead{
			position: absolute;
			width: 340rpx;
			height: 340rpx;
			top: 232rpx;
			left: 204rpx;
			transition: opacity 1s;
		}
		&-rings{
			position: absolute;
			width: 100%;
			height: 100%;
		}
		&-transport{
			transition: all 1s;
			overflow: hidden;

			image{
				width: 100%;
				height: 100%;
				border-radius: 50%;
			}
		}
	}
</style>

<template>
    <view class="net-container">
        <!-- 用户中心头像显示 -->
        <view class="l-rowAllMid net-userhead"  style='opacity: {{userhead.opacity}};'>
            <image class="net-rings" src='../../static/images/contacts/rings.png'></image>
            <ava :info='userhead' :opacity='userhead.opacity'></ava>
		</view>

        <!-- 人脉网显示 -->
        <repeat for="{{avaList}}" item="item" index='idx'>
			<ava :info='item' @avaClick.user='changeUser' :opacity='avaListopacity' :display='avaListshow'></ava>
		</repeat>

        <!-- 为完成点击头像切换人脉网效果而设置的特殊模块 -->
        <view class='net-avatar net-transport absolute' style="width: {{transport.size}}rpx; height: {{transport.size}}rpx; top: {{transport.top}}rpx; left: {{transport.left}}rpx; display: {{transport.show}}">
            <image src='{{transport.src}}'></image>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
	import Avatar from './Avatar'
	// import API from '../../API/index'
	// import * as WXUTIL from '../../common/scripts/wxUtil'
    
    /*
     * {props}: usersrc: 用户头像链接/ srclist: 用户好友头像链接
     */
	export default class AvatarNet extends wepy.component {
        components = {
            ava: Avatar
		}
		
		props = {
			usersrc: {
				type: String
			}, 
			srclist: {
				type: Array
			}
		}

        data = {
			// maxHigh假数据
			maxHigh: 840,
			userhead: {
				src: '',
				size: '204',
				opacity: '1'
			},
			avaListopacity: 1,
			avaListshow: 'block',
			avaList: [],
			transport: {
				show: '',
				src: '',
				size: '',
				top: '',
				left: ''
			}
		}

		events = {
			changeGroup (e) {
				if (this.avaList1opacity === '1') {
					this.avaList1opacity = '0';
					this.avaList2show = 'block';

					setTimeout(() => {
						this.avaList2opacity = '1';
						this.avaList1show = 'none';
						this.$apply();
					}, 1000)

					this.$apply();
					return ;
				} if (this.avaList2opacity === '1') {
					this.avaList2opacity = '0';
					this.avaList3show = 'block';

					setTimeout(() => {
						this.avaList3opacity = '1';
						this.avaList2show = 'none';
						this.$apply();
					}, 1000)

					this.$apply();
					return ;
				} if (this.avaList3opacity === '1') {
					this.avaList3opacity = '0';
					this.avaList1show = 'block';

					setTimeout(() => {
						this.avaList1opacity = '1';
						this.avaList3show = 'none';
						this.$apply();
					}, 1000)

					this.$apply();
					return ;
				}
			},
		}

		methods = {
			// 还应在此方法中向主页发起请求，用于刷新用户好友头像列表
			changeUser (e) {
				console.log(e.currentTarget)
				const listNum = (e.currentTarget.id).slice(7, 8);
				const idx = (e.currentTarget.id).slice(8);
				
				let avaList = [];

				// 消失动画
				switch (listNum) {
					case '1':{
						this.avaList1opacity = '0';
						avaList = this.avaList1;

						setTimeout(() => {
							this.avaList1show = 'none';
							this.$apply();
						}, 1000)

						break;
					}
					case '2':{
						this.avaList2opacity = '0';
						avaList = this.avaList2;

						setTimeout(() => {
							this.avaList2show = 'none';
							this.$apply();
						}, 1000)

						break;
					}
					case '3':{
						this.avaList3opacity = '0';
						avaList = this.avaList3;

						setTimeout(() => {
							this.avaList3show = 'none';
							this.$apply();
						}, 1000)

						break;
					}
				}
				this.userhead.opacity = '0';

				// 移位动画
				this.transport.src = avaList[idx].src;
				this.transport.size = avaList[idx].size;
				this.transport.top = avaList[idx].top;
				this.transport.left = avaList[idx].left;
				this.transport.show = 'block';

				this.$apply();

				setTimeout(() => {
					this.transport.size = '204';
					this.transport.top = '296';
					this.transport.left = '270';
					this.$apply();
				}, 1000)
				

				setTimeout(() => {
					this.userhead.opacity = '1';
					this.userhead.src = this.transport.src;
					this.avaList1show = 'block';
					
					this.$apply();
				}, 2000)
				
				// 清除移位容器状态，为下次动画做准备
				setTimeout(() => {
					this.avaList1opacity = '1';

					this.transport.show = 'none';
					this.transport.src = '';
					this.transport.size = '';
					this.transport.top = '';
					this.transport.left = '';

					this.$apply();
				}, 3000)
			},
			jumpToGroups (e) {
				wx.navigateTo({
					url: './contacts/groups'
				})
			}
		}

		onLoad () {
			// 获取窗口高度
			// console.log($WX.getSystemInfo())

			this.userhead.src = this.usersrc;

			/**
			* @desc 生成随机点
			* @param w {number} 画布宽度
			* @param h {number} 画布高度
			* @return {object} 随机点坐标
			*/
			const _randomPoint = (w = 750, h) => {
				const x = parseInt(w * Math.random());
				const y = parseInt(h * Math.random());

				return {x: x, y: y};
			}

			/**
			* @desc 碰撞检测
			* @param pointA {object} A目标坐标、半径
			* @param pointB {object} B目标坐标、半径
			* @return {boolean} 是否重叠
			*/
			const _isOverlay = (pointA, pointB) => {
				const xGap = pointA.x - pointB.x;
				const yGap = pointA.y - pointB.y;
				const rGap = Math.abs(pointA.radius + pointB.radius);
				const distance = Math.sqrt(xGap * xGap + yGap * yGap);

				if (rGap < distance) {
					return true;
				} else {
					return false;
				}
			}

			/**
			* @desc 合法性检测
			* @param point {object} 目标坐标、半径
			* @param h {number}	画布高度
			* @param posList {array} 已有位置列表
			* @return {boolean} 是否合法
			*/
			const _isValid = (point, h, posList = {}) => {
				const x = point.x;
				const y = point.y;
				const radius = point.radius

				// x值不符合要求
				// 神秘数字750：微信小程序定义的屏幕宽度
				if (x <= radius || x >= (750 - radius)) return false;
				// y值不符合要求
				if (y <= radius || y >= (h - radius)) return false;
				// x、y组合不符合要求
				// 神秘数字195\545：方框范围公式的化简
				// 神秘数字170：方框宽度的一半
				if (x > (195 - radius) && x < (545 + radius) && y > (h / 2 - 170 - radius) && y < (h / 2 + 170 + radius)) return false;
				// x、y组合和已有位置发生碰撞
				for(let i = 0; i < posList.length; i++) {
					if (_isOverlay(point, posList[i])) {
						continue;
					} else {
						return false;
					}
				}

				// 检查完成
				return true;
			}

			/**
			* @desc 生成随机点列表
			* @param h {number} 画布高度
			* @return {array} 随机位置列表
			*/
			const _randomPositions = (h) => {
				let pointList = [];
				let miniCounter = 0;
				let hugeCounter = 0;

				while(miniCounter < 4) {
					let point = _randomPoint(750, h);
					
					point.radius = 32;

					if(_isValid(point, h, pointList)) {
						miniCounter++;
						pointList.push(point);
					}
				}

				while(hugeCounter < 5) {
					let point = _randomPoint(750, h);
					
					point.radius = 55;

					if(_isValid(point, h, pointList)) {
						hugeCounter++;
						pointList.push(point);
					}
				}

				return pointList;
			}

			this.avaList = _randomPositions(840);

			console.log(this.avaList)

			this.avaList.forEach((val, idx) => {
				val.src = this.srclist[idx];
				val.id = 'avaList' + idx;
			})

			this.$apply();
		}
	}
</script>
