<style lang="scss" type="text/scss">
	@import "../common/styles/variables.scss";
	@import "../common/styles/common.scss";

	.net{
		&-container{
			position: relative;
			width: 750rpx; 
			overflow: hidden;
		}
		&-userhead{
			width: 336rpx;
			height: 336rpx;
			top: 27.6%;
			left: 204rpx;
			transition: opacity 1s;

			view{
				width: 204rpx;
				height: 204rpx;
			}
		}
		&-avatar{
			background: #F5F5F5;
			border-radius: 50%;
			transition: opacity 1s;
			overflow: hidden;

			image{
				width: 100%;
				height: 100%;
			}
		}
		&-rings{
			width: 100%;
			height: 100%;
		}
		&-transport{
			transition: all 1s
		}
	}

	.btns{
		justify-content: space-around;
		flex-wrap: wrap;
	}
</style>

<template>
	<view class="net-container" style="height: {{high}}rpx;">
		<!-- 用户中心头像显示 -->
		<view class="l-rowAllMid absolute net-userhead">
			<image class="absolute net-rings" src='../static/images/contacts/rings.png'></image>
			<view  class='net-avatar' style='opacity: {{userhead.opacity}};'>
				<image src='{{userhead.src}}'></image>
			</view>
		</view>

		<!-- 人脉网显示图一 -->
        <repeat for="{{avaList1}}" item="item" index='idx'>
			<view hidden='{{!avaList1show}}' class='net-avatar absolute' style="width: {{item.size}}rpx; height: {{item.size}}rpx; top: {{item.top}}; left: {{item.left}}rpx; opacity: {{avaList1opacity}};">
                <image src='{{item.src}}' id='avaList1{{idx}}' @tap='changeUser'></image>
            </view>
		</repeat>

		<!-- 人脉网显示图二 -->
		<repeat for="{{avaList2}}" item="item" index='idx'>
			<view hidden='{{!avaList2show}}' class='net-avatar absolute' style="width: {{item.size}}rpx; height: {{item.size}}rpx; top: {{item.top}}; left: {{item.left}}rpx; opacity: {{avaList2opacity}};">
				<image src='{{item.src}}' id='avaList2{{idx}}' @tap='changeUser'></image>
			</view>
		</repeat>

		<!-- 人脉网显示图三 -->
		<repeat for="{{avaList3}}" item="item" index='idx'>
			<view hidden='{{!avaList3show}}' class='net-avatar absolute' style="width: {{item.size}}rpx; height: {{item.size}}rpx; top: {{item.top}}; left: {{item.left}}rpx; opacity: {{avaList3opacity}};">
				<image src='{{item.src}}' id='avaList3{{idx}}' @tap='changeUser'></image>
			</view>
		</repeat>

		<!-- 为完成点击头像切换人脉网效果而设置的特殊模块 -->
		<view hidden='{{!transport.show}}' class='net-avatar net-transport absolute' style="width: {{transport.size}}rpx; height: {{transport.size}}rpx; top: {{transport.top}}; left: {{transport.left}}rpx;">
			<image src='{{transport.src}}'></image>
		</view>
	</view>
	
	<!-- 跳转按钮部分 -->
	<view class=".l-row btns">
		<viewBtn title='查看我的人脉圈' @btnClick.user='jumpToGroups' color='blue'></viewBtn>
		<changeBtn title="换一批" @btnClick.user='changeGroup' color='white-border'></changeBtn>
	</view>
</template>

<script>
	import page from './base/basicPage'
	import Button from '../components/Button/Button'

	export default class Index extends page {
		config = {
			navigationBarTitleText: '我的人脉网'
		}

		components = {
			viewBtn: Button,
			changeBtn: Button
		}

		data = {
			// 幕布高度
			high: 840,
			userhead: {
				src: '',
				opacity: '1'
			},
			// 除用户头像外的其他头像
			avaList1opacity: '1',
			avaList2opacity: '0',
			avaList3opacity: '0',
			avaList1show: true,
			avaList2show: false,
			avaList3show: false,
			avaList1: [
				{
                size: '112',
                top: '23.8%',
                left: '148'
				},{
					size: '112',
					top: '20%',
					left: '472'
				},{
					size: '112',
					top: '61.9%',
					left: '160'
				},{
					size: '112',
					top: '61.9%',
					left: '480'
				},{
					size: '64',
					top: '12.4%',
					left: '344'
				},{
					size: '64',
					top: '47.6%',
					left: '48'
				},{
					size: '64',
					top: '47.6%',
					left: '642'
				},{
					size: '64',
					top: '85.5%',
					left: '208'
				},{
					size: '64',
					top: '85.5%',
					left: '480'
				}
			],
			avaList2: [
				{
					size: '112',
					top: '13.3%',
					left: '320'
				},{
					size: '112',
					top: '41.2%',
					left: '92'
				},{
					size: '112',
					top: '42.1%',
					left: '540'
				},{
					size: '112',
					top: '69%',
					left: '320'
				},{
					size: '64',
					top: '19.8%',
					left: '72'
				},{
					size: '64',
					top: '20%',
					left: '608'
				},{
					size: '64',
					top: '71.4%',
					left: '104'
				},{
					size: '64',
					top: '73.1%',
					left: '560'
				},{
					size: '64',
					top: '91.7%',
					left: '344'
				}
			],
			avaList3: [
				{
					size: '112',
					top: '19.0%',
					left: '440'
				},{
					size: '112',
					top: '38.1%',
					left: '110'
				},{
					size: '112',
					top: '47.6%',
					left: '520'
				},{
					size: '112',
					top: '64.3%',
					left: '220'
				},{
					size: '64',
					top: '6.4%',
					left: '376'
				},{
					size: '64',
					top: '16.7%',
					left: '140'
				},{
					size: '64',
					top: '77.6%',
					left: '96'
				},{
					size: '64',
					top: '73.8%',
					left: '530'
				},{
					size: '64',
					top: '86.9%',
					left: '380'
				}
			],
			transport: {
				id: '',
				show: '',
				src: '',
				size: '',
				top: '',
				left: ''
			}
		}

		methods = {
			changeGroup (e) {
				if (this.avaList1opacity === '1') {
					this.avaList1opacity = '0';
					this.avaList2show = true;

					setTimeout(() => {
						this.avaList2opacity = '1';
						this.avaList1show = false;
						this.$apply();
					}, 1000)

					this.$apply();
					return ;
				} if (this.avaList2opacity === '1') {
					this.avaList2opacity = '0';
					this.avaList3show = true;

					setTimeout(() => {
						this.avaList3opacity = '1';
						this.avaList2show = false;
						this.$apply();
					}, 1000)

					this.$apply();
					return ;
				} if (this.avaList3opacity === '1') {
					this.avaList3opacity = '0';
					this.avaList1show = true;

					setTimeout(() => {
						this.avaList1opacity = '1';
						this.avaList3show = false;
						this.$apply();
					}, 1000)

					this.$apply();
					return ;
				}
			},
			changeUser (e) {
				const listNum = (e.currentTarget.id).slice(7, 8);
				const idx = (e.currentTarget.id).slice(8);
				
				let selectedAva = this[`avaList${listNum}`][idx];

				if (selectedAva.src) {
					// 向transport中注入信息
					let insertTransport = (resolve) => {
						return new Promise((resolve, reject) => {
							console.log(1);
							this.transport.id = selectedAva.id;					
							this.transport.src = selectedAva.src;
							this.transport.size = selectedAva.size;
							this.transport.top = selectedAva.top;
							this.transport.left = selectedAva.left;
							this.transport.show = true;
							this.$apply();
							resolve();
						})
					}
					
					// 头像列表消失动画
					let avaListFadeOut = (resolve) => {
						return new Promise((resolve, reject) => {
							console.log(2);
							this.userhead.opacity = '0';
							this.avaList1opacity = '0';
							this.avaList2opacity = '0';
							this.avaList3opacity = '0';
							this.$apply();
							resolve();
						})
						.then(() => {
							return new Promise((resolve, reject) => {
								console.log(3);
								setTimeout(() => {
									this.avaList1show = false;
									this.avaList2show = false;
									this.avaList3show = false;
									this.$apply();
									resolve();
								}, 1000);
							})
						})	
					}

					// 清空头像列表信息，更改中心头像
					let cleanAvaList = (resolve) => {
						return new Promise((resolve, reject) => {
							console.log(4);
							for(let i = 1; i < 4; i++) {
								for(let j = 0; j < 9; j++) {
									this[`avaList${i}`][j].src = '';
								}
							}

							this.userhead.src = this.transport.src
							this.$apply();
							resolve();
						})						
					}

					// 好友头像移动到中间
					let moveAva = (resolve) => {
						return new Promise((resolve, reject) => {
							console.log(5);
							this.transport.size = '204';
							this.transport.top = '34.8%';
							this.transport.left = '270';
							this.$apply();
							resolve();
						})
						
					}

					// 请求好友人脉网信息
					let getFriendNetInfo = (resolve) => {
						return this.$API('getNetInfo', {uid: this.transport.id}, {Cookie: 'JSESSIONID=' + this.$parent.sessionId})
						.then(res => {
							console.log(res);
							return new Promise((resolve, reject) => {
								console.log(6);
								if (res.data) {
									for(let i = 0; i < res.data.length; i++) {
										if (i < 9) {
											this.avaList1[i].src = res.data[i].avatarUrl;
											this.avaList1[i].id = res.data[i].id;
										} if (i >= 9 && i < 18) {
											this.avaList2[i].src = res.data[i].avatarUrl;
											this.avaList2[i].id = res.data[i].id;
										} if (i >= 18 && i < 27) {
											this.avaList3[i].src = res.data[i].avatarUrl;
											this.avaList3[i].id = res.data[i].id;
										}
									}

									this.$apply();
									resolve();
								}
							})
						})
					}

					// 清空transport并显示头像列表
					let avaListFadeIn = (resolve) => {
						return new Promise((resolve, reject) => {
							console.log(7);
							setTimeout(() => {
								this.userhead.opacity = '1';

								this.avaList1show = true;
								this.avaList2show = false;
								this.avaList3show = false;
								this.$apply();
								resolve();
							}, 1000)
						})
						.then(() => {
							console.log(8)
							return new Promise((resolve, reject) => {
								setTimeout(() => {
									this.avaList1opacity = '1';
									this.avaList2opacity = '0';
									this.avaList3opacity = '0';
									
									this.transport.show = false;
									this.transport.id = '';					
									this.transport.src = '';
									this.transport.size = '';
									this.transport.top = '';
									this.transport.left = '';
									this.$apply();
								}, 1000)
							})
						})
					}
					
					insertTransport()
					.then(avaListFadeOut)
					.then(cleanAvaList)
					.then(moveAva)
					.then(getFriendNetInfo)
					.then(avaListFadeIn)
				}
			},
			jumpToGroups (e) {
				wx.navigateTo({
					url: './contacts/groups'
				})
			}
		}

		onLoad () {
			console.log('index');
			
			// 设置幕布高度
			this.high = this.$parent.screenHeight * 0.75;

			// 设置中心用户头像
			this.userhead.src = this.$parent.avatarUrl;

			this.$API('getNetInfo', {uid: this.$parent.userId}, {Cookie: 'JSESSIONID=' + this.$parent.sessionId})
			.then(res => {
				console.log(res);
				if (res.data) {
					for(let i = 0; i < res.data.length; i++) {
						if (i < 9) {
							this.avaList1[i].src = res.data[i].avatarUrl;
							this.avaList1[i].id = res.data[i].id;
						} if (i >= 9 && i < 18) {
							this.avaList2[i].src = res.data[i].avatarUrl;
							this.avaList2[i].id = res.data[i].id;
						} if (i >= 18 && i < 27) {
							this.avaList3[i].src = res.data[i].avatarUrl;
							this.avaList3[i].id = res.data[i].id;
						}
					}

					this.$apply();
				}
			})

			this.$apply();
		}
	}
</script>
